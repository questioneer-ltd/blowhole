# Stubs for docker.api.container (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from ..constants import DEFAULT_DATA_CHUNK_SIZE
from ..types import CancellableStream, ContainerConfig, EndpointConfig, HostConfig, NetworkingConfig
from typing import Any, Optional

class ContainerApiMixin:
    def attach(self, container: Any, stdout: bool = ..., stderr: bool = ..., stream: bool = ..., logs: bool = ..., demux: bool = ...): ...
    def attach_socket(self, container: Any, params: Optional[Any] = ..., ws: bool = ...): ...
    def commit(self, container: Any, repository: Optional[Any] = ..., tag: Optional[Any] = ..., message: Optional[Any] = ..., author: Optional[Any] = ..., changes: Optional[Any] = ..., conf: Optional[Any] = ...): ...
    def containers(self, quiet: bool = ..., all: bool = ..., trunc: bool = ..., latest: bool = ..., since: Optional[Any] = ..., before: Optional[Any] = ..., limit: int = ..., size: bool = ..., filters: Optional[Any] = ...): ...
    def create_container(self, image: Any, command: Optional[Any] = ..., hostname: Optional[Any] = ..., user: Optional[Any] = ..., detach: bool = ..., stdin_open: bool = ..., tty: bool = ..., ports: Optional[Any] = ..., environment: Optional[Any] = ..., volumes: Optional[Any] = ..., network_disabled: bool = ..., name: Optional[Any] = ..., entrypoint: Optional[Any] = ..., working_dir: Optional[Any] = ..., domainname: Optional[Any] = ..., host_config: Optional[Any] = ..., mac_address: Optional[Any] = ..., labels: Optional[Any] = ..., stop_signal: Optional[Any] = ..., networking_config: Optional[Any] = ..., healthcheck: Optional[Any] = ..., stop_timeout: Optional[Any] = ..., runtime: Optional[Any] = ..., use_config_proxy: bool = ...): ...
    def create_container_config(self, *args: Any, **kwargs: Any): ...
    def create_container_from_config(self, config: Any, name: Optional[Any] = ...): ...
    def create_host_config(self, *args: Any, **kwargs: Any): ...
    def create_networking_config(self, *args: Any, **kwargs: Any): ...
    def create_endpoint_config(self, *args: Any, **kwargs: Any): ...
    def diff(self, container: Any): ...
    def export(self, container: Any, chunk_size: Any = ...): ...
    def get_archive(self, container: Any, path: Any, chunk_size: Any = ...): ...
    def inspect_container(self, container: Any): ...
    def kill(self, container: Any, signal: Optional[Any] = ...) -> None: ...
    def logs(self, container: Any, stdout: bool = ..., stderr: bool = ..., stream: bool = ..., timestamps: bool = ..., tail: str = ..., since: Optional[Any] = ..., follow: Optional[Any] = ..., until: Optional[Any] = ...): ...
    def pause(self, container: Any) -> None: ...
    def port(self, container: Any, private_port: Any): ...
    def put_archive(self, container: Any, path: Any, data: Any): ...
    def prune_containers(self, filters: Optional[Any] = ...): ...
    def remove_container(self, container: Any, v: bool = ..., link: bool = ..., force: bool = ...) -> None: ...
    def rename(self, container: Any, name: Any) -> None: ...
    def resize(self, container: Any, height: Any, width: Any) -> None: ...
    def restart(self, container: Any, timeout: int = ...) -> None: ...
    def start(self, container: Any, *args: Any, **kwargs: Any) -> None: ...
    def stats(self, container: Any, decode: Optional[Any] = ..., stream: bool = ...): ...
    def stop(self, container: Any, timeout: Optional[Any] = ...) -> None: ...
    def top(self, container: Any, ps_args: Optional[Any] = ...): ...
    def unpause(self, container: Any) -> None: ...
    def update_container(self, container: Any, blkio_weight: Optional[Any] = ..., cpu_period: Optional[Any] = ..., cpu_quota: Optional[Any] = ..., cpu_shares: Optional[Any] = ..., cpuset_cpus: Optional[Any] = ..., cpuset_mems: Optional[Any] = ..., mem_limit: Optional[Any] = ..., mem_reservation: Optional[Any] = ..., memswap_limit: Optional[Any] = ..., kernel_memory: Optional[Any] = ..., restart_policy: Optional[Any] = ...): ...
    def wait(self, container: Any, timeout: Optional[Any] = ..., condition: Optional[Any] = ...): ...
