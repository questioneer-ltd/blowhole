# Stubs for docker.auth (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .utils import config
from typing import Any, Optional

INDEX_NAME: str
INDEX_URL: Any
TOKEN_USERNAME: str
log: Any

def resolve_repository_name(repo_name: Any): ...
def resolve_index_name(index_name: Any): ...
def get_config_header(client: Any, registry: Any): ...
def split_repo_name(repo_name: Any): ...
def get_credential_store(authconfig: Any, registry: Any): ...

class AuthConfig(dict):
    def __init__(self, dct: Any, credstore_env: Optional[Any] = ...) -> None: ...
    @classmethod
    def parse_auth(cls, entries: Any, raise_on_error: bool = ...): ...
    @classmethod
    def load_config(cls, config_path: Any, config_dict: Any, credstore_env: Optional[Any] = ...): ...
    @property
    def auths(self): ...
    @property
    def creds_store(self): ...
    @property
    def cred_helpers(self): ...
    @property
    def is_empty(self): ...
    def resolve_authconfig(self, registry: Optional[Any] = ...): ...
    def get_credential_store(self, registry: Any): ...
    def get_all_credentials(self): ...
    def add_auth(self, reg: Any, data: Any) -> None: ...

def resolve_authconfig(authconfig: Any, registry: Optional[Any] = ..., credstore_env: Optional[Any] = ...): ...
def convert_to_hostname(url: Any): ...
def decode_auth(auth: Any): ...
def encode_header(auth: Any): ...
def parse_auth(entries: Any, raise_on_error: bool = ...): ...
def load_config(config_path: Optional[Any] = ..., config_dict: Optional[Any] = ..., credstore_env: Optional[Any] = ...): ...
