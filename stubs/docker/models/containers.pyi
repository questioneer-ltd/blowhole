# Stubs for docker.models.containers (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from ..api import APIClient
from ..constants import DEFAULT_DATA_CHUNK_SIZE
from ..errors import ContainerError, DockerException, ImageNotFound, NotFound, create_unexpected_kwargs_error
from ..types import HostConfig
from ..utils import version_gte
from .images import Image
from .resource import Collection, Model
from collections import namedtuple
from typing import Any, Optional

class Container(Model):
    @property
    def name(self): ...
    @property
    def image(self): ...
    @property
    def labels(self): ...
    @property
    def status(self): ...
    @property
    def ports(self): ...
    def attach(self, **kwargs: Any): ...
    def attach_socket(self, **kwargs: Any): ...
    def commit(self, repository: Optional[Any] = ..., tag: Optional[Any] = ..., **kwargs: Any): ...
    def diff(self): ...
    def exec_run(self, cmd: Any, stdout: bool = ..., stderr: bool = ..., stdin: bool = ..., tty: bool = ..., privileged: bool = ..., user: str = ..., detach: bool = ..., stream: bool = ..., socket: bool = ..., environment: Optional[Any] = ..., workdir: Optional[Any] = ..., demux: bool = ...): ...
    def export(self, chunk_size: Any = ...): ...
    def get_archive(self, path: Any, chunk_size: Any = ...): ...
    def kill(self, signal: Optional[Any] = ...): ...
    def logs(self, **kwargs: Any): ...
    def pause(self): ...
    def put_archive(self, path: Any, data: Any): ...
    def remove(self, **kwargs: Any): ...
    def rename(self, name: Any): ...
    def resize(self, height: Any, width: Any): ...
    def restart(self, **kwargs: Any): ...
    def start(self, **kwargs: Any): ...
    def stats(self, **kwargs: Any): ...
    def stop(self, **kwargs: Any): ...
    def top(self, **kwargs: Any): ...
    def unpause(self): ...
    def update(self, **kwargs: Any): ...
    def wait(self, **kwargs: Any): ...

class ContainerCollection(Collection):
    model: Any = ...
    def run(self, image: Any, command: Optional[Any] = ..., stdout: bool = ..., stderr: bool = ..., remove: bool = ..., **kwargs: Any): ...
    def create(self, image: Any, command: Optional[Any] = ..., **kwargs: Any): ...
    def get(self, container_id: Any): ...
    def list(self, all: bool = ..., before: Optional[Any] = ..., filters: Optional[Any] = ..., limit: int = ..., since: Optional[Any] = ..., sparse: bool = ..., ignore_removed: bool = ...): ...
    def prune(self, filters: Optional[Any] = ...): ...

RUN_CREATE_KWARGS: Any
RUN_HOST_CONFIG_KWARGS: Any

ExecResult = namedtuple('ExecResult', 'exit_code,output')
